{% extends 'base.jinja2' %}

{% block head %}{% endblock %}

{% block header %}
    <h1>{% block title %}{% endblock%} - Senslify</h1>
{% endblock %}
{% block content %}
    <canvas id="canvas_chart" width="400" height="400"></canvas>
{% endblock %}
{% block footer %}
    <script href="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.8.0/Chart.min.js"></script>
    <script>
        var chart;  // The chart canvas itself
        var ctx;    // The 2d context for drawing
        // Get the sensor
        var sensor = {% block sensor %}{% endblock %}; 
        // Used for sending and receiving updates to/from the server
        //  Exists for the duration of the user's visit to the page
        var ws = new WebSocket({% block ws_url %}{% endblock %});

        // Defines a method for setting up variables once the DOM tree loads
        $(document).ready(function() {
            // get a reference to the chart and its context for drawing
            ctx = document.getElementById('canvas_chart').getContext("2d");
            chart = new Chart(ctx, {
                type: 'line'
            });
        });

        // Defines a method for closing the socket connection when navigating away
        $(window).unload(function() {
            // Send a message to the server to close the connection
            ws.send(JSON.stringify({'cmd': 'CLOSE'}));
            // Close the connection
            ws.close();
        )};

        // Defines a method for sending the server the room join request
        ws.onopen() = function(e) {
            msg = {'cmd': 'JOIN', 'msg': {{ sensor }}};
            ws.send(JSON.stringify(msg));
        }

        // Receives information from the server
        ws.onmessage() = function(e) {
            // Only update the chart if the received data from the server 
            //  validates ok
            if (validate_reading(e.data)) {
                update_chart(e.data);
            }
        }

        // Validates data received from the server
        function validate_reading(data) {
            // TODO: Validate the data received from the server
            return true;
        }

        // Defines a method for updating the chart when data is received
        function update_chart(data) {
            // TODO: Update the chart with the data from the server
        }

    </script>
{% endblock %}
