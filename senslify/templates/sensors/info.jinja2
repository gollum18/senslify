{% extends 'base.jinja2' %}

{% block head %}
    <!-- Make sure to test the new versions of these libraries prior to upgrading them. -->
    <!-- Pull down ChartJS for graphing and Moment for time -->
    <script src="https://cdn.jsdelivr.net/combine/npm/moment@2,npm/chart.js@2"></script>
    <!-- ChartJS Realtime Extension -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@1.8.0/dist/chartjs-plugin-streaming.min.js"></script>
{% endblock %}

{% block header %}
    <h2>{{ title }} - Senslify</h2>
{% endblock %}

{% block content %}
    <!-- This section defines the stats display for real-time stats. -->
    <section class="container-fluid">
        <div id="row">
            <h3>Real-time stats for Sensor: {{ sensorid }}:</h3>
        </div>
        <div id="row">
            <table class="table">
                <tr>
                    <th scope="col">Average</th>
                    <th scope="col">Minimum</th>
                    <th scope="col">Maximum</th>
                </tr>
                <tr>
                    <td id="rt_stats_avg">0</td>
                    <td id="rt_stats_min">0</td>
                    <td id="rt_stats_max">0</td>
                </tr>
            </table>
        </div>
        <div id="row">
            <button type="button" class="btn btn-outline-info" data-toggle="modal" data-target="#statsModal">
              View Historical Stats
            </button>
        </div>
    </section>
    <!-- This section defines the live chart. -->
    <section class="container-fluid">
        <div class="row">
            <h3>Live Display for Sensor: {{ sensorid }}</h3>
        </div>
        <div class="row">
            <div class="chart-container" style="position: relative; height:40vh; width:80vw">
                <canvas id="canvas_chart"></canvas>
            </div>
        </div>
        <div class="row">
            <h6>Note: Live display will not update if the sensor is offline.</h6>
        </div>
        <div class="row">
            <!-- Used to indicate the reading type to send from server -->
            <label for="sel_rtype">Reading: </label>
            <select id="sel_rtype" onchange="onStreamChanged();">
                {% for rtype in rtypes %}
                    <option value="{{ rtype.rtypeid }}">{{ rtype.rtype }}</option>
                {% endfor %}
            </select>
        </div>
    </section>
    <section class="container-fluid">
        <h3>Last {{ num_readings }} Readings for Sensor {{ sensorid }}:</h3>
        <ul class="list-group" id="list_readings"></ul>
    </section>
    <!-- This defines the modal for selecting stats over a time period -->
    <div class="modal fade bd-example-modal-lg" id="statsModal" tabindex="-1" role="dialog"  aria-labelledby="On-Demand stats" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 id="stats_header"></h5>
            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
              <span aria-hidden="true">&times;</span>
            </button>
          </div>
          <div class="modal-body">
            <table class="table">
                <tr>
                    <th scope="col">Average</th>
                    <th scope="col">Minimum</th>
                    <th scope="col">Maximum</th>
                </tr>
                <tr>
                    <td id="sel_stats_avg">0</td>
                    <td id="sel_stats_min">0</td>
                    <td id="sel_stats_max">0</td>
                </tr>
            </table>
          </div>
          <div class="modal-footer">
            <label for="start_date_picker">Start Date:</label>
            <input id="start_date_picker" type="date" value="{{ start_date|date }}">
            <label for="end_date_picker">End Date:</label>
            <input id="end_date_picker" type="date" value="{{ end_date|date }}">
            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
            <input type="button" class="btn btn-primary" value="Get Stats" onclick="onStatsRequested();">
           </div>
          </div>
        </div>
      </div>
    </div>
{% endblock %}

{% block footer %}
    <!-- The below script handles WebSocket and chart interaction. -->
    <script>
        
        //
        // Define all necessary script variables
        //
        
        // the number of readings to retrieve from the server
        const rlim = {{ num_readings }};
        // the id of the sensor to receive messages for
        const sensorid = {{ sensorid }};
        // the id of the group the sensor belongs to
        const groupid = {{ groupid }};
        // the websocket for sending/receiving messages to/from the server
        //  the websocket is constant as it persists for the life of the page
        const ws = new WebSocket('{{ ws_url }}');
        // stores the number of readings seen so far
        var readingsSoFar = 0;
        // stores a reference to the chart object for graphically displaying 
        //  readings
        var rtChart = null;
        
        //
        // Define handlers for the window
        //
        
        function teardown() {
            let msg = {'cmd': 'RQST_CLOSE', 'groupid': groupid, 'sensorid': sensorid};
            ws.send(JSON.stringify(msg));
            ws.close();
        }
        
        /**
         * Handles back and forward events from the browser.
         * Signals a teardown of the WS at the server as well to teardown the
         * WS on the client.
         */
        window.onhashchange = function() {
            teardown();
        }
        
        // Tears down the WebSocket when the window is closed.
        $(window).on("unload", () => {
            teardown();
        });
        
        //
        // Define handlers for the WebSocket
        //
        
        /**
         * Client side WS handler that requests the server to enqueue the 
         * WS representing this client to receive messages for the sensor
         * indicated by sensorid.
         */
        function joinHandler() {
            let rqst = {'cmd': 'RQST_JOIN', 'groupid': groupid, 'sensorid': sensorid};
            ws.send(JSON.stringify(rqst));
        }
        
        /**
         * Client side WS handler that handles received messages (readings)
         * from the server. The client only receives readings for the 
         * sensorid and rtypeid that it has registered to receive updates on.
         * @param resp The response from the server.
         */
        function readingHandler(resp) {
            // increment the number of readings seen so far
            //  I dont anticipate someone to sit on the window long enough
            //  for the readings counter to wrap
            readingsSoFar += 1;
        
            // get the components we need to update
            let tdMin = $("rt_stats_min");
            let tdMax = $("rt_stats_max");
            let tdAvg = $("rt_stats_avg");
            let rlist = $("#list_readings");
            
            // evict the oldest reading if at the limit
            if (rlist.children().length === rlim) {
                rlist.children().last().remove();
            }
            
            // update the stats for the readings
            // TODO: We probably want to store the stuff for averaging
            //  separately as the current method works on floats of two
            //  different precisions
            try {
                let value = parseFloat(resp.readings[0].val);
                let oldMin = parseFloat(tdMin.text());
                let oldMax = parseFloat(tdMax.text());
                if (value < oldMin) {
                    tdMin.text(value.toFixed(4));
                } else if (value > oldMax) {
                    tdMax.text(value.toFixed(4));
                }
                if (readingsSoFar === 1) {
                    tdAvg.text(value.toFixed(4));
                } else {
                    let oldMu = parseFloat(tdAvg.text());
                    let newMu = oldMu + ((value - oldMu) / readingsSoFar);
                    tdAvg.text(newMu.toFixed(4));
                }
            } catch (err) {
                console.log(err);
                readingsSoFar = 0;
                tdMin.text("0");
                tdMax.text("0");
                tdAvg.text("0");
            }
            
            // get the first element, remove the active class from it
            $("#list_readings > li")
                .first()
                .removeClass("active");
            
            // add the reading to the front of the list
            $('<li/>')
                    .addClass("list-group-item active")
                    .text(resp.readings[0].rstring)
                    .prependTo($("#list_readings"));
                    
            // remove the last element from the chart if we are at the limit
            //  this should fix the memory-expansion bug in browsers
            if (rtChart.data.datasets[0].data.length === rlim) {
                // perform reverse of push() operation
                rtChart.data.datasets[0].data.shift();
            }
                    
            // add the new reading to the chart
            rtChart.data.datasets[0].data.push({
                x: moment.unix(resp.readings[0].ts).utc(),
                y: resp.readings[0].val
            });
            
            // update the chart, keeping the current animation
            rtChart.update({
                preservation: true
            });
        }
        
        /**
         * Client side WS handler that handles received messages (stas) from
         * the server. The client receives an up-to-date view on the stats for 
         * a single RType and Sensor. The stats are stored in the message using
         * the following mapping: 
         *   stats: avg, min, max
         * @param resp The response from the server.
         */
        function statsHandler(resp) {
            let stats = resp.stats;
            let rtext = $("#sel_rtype option:selected").text();
            let start_date = $("#start_date_picker").val();
            let end_date = $("#end_date_picker").val()
            
            $("#stats_header").text(`Showing ${rtext} stats for the range: ${start_date} - ${end_date}`);
                
            $("#sel_stats_avg").text(stats.avg.toFixed(4));
            $("#sel_stats_min").text(stats.min.toFixed(4));
            $("#sel_stats_max").text(stats.max.toFixed(4));
        }
        
        /**
         * Client side WS handler that handles received messages (a dataset)
         * from the server. The client receives an up-to-date dataset containing
         * the top 100 most recent readings for the sensorid and rtypeid they
         * are registered with.
         * @param resp The response from the server.
         */ 
        function streamHandler(resp) {
            // get the readings from the response
            let readings = resp.readings;
            
            // reset the chart
            reloadChart();
            
            // reload the list
            reloadList(resp.readings);
        }
        
        /**
         * Client side WS handlet that is fired when the WebSocket is closed.
         * Handles cleaning up after it.
         */
        function onWSClose() {
			rtChart.destroy();
        }
        
        /**
         * Client side WS handler that fires when the WebSocket first opens.
         * This is used by the client to register the sensor it wants to
         * receive updates for.
         * @param err An error if one occurs.
         */
        function onWSOpen(err) {
            // Register a listener on the server
            joinHandler();
            // Only get the initial dataset when the document has loaded
            $(document).ready(function() {
                onStreamChanged();
            });
        }
        
        /**
         * Routes messages received over the WebSocket interface.
         * @param msg A message received via the WebSocket.
         */
        function onWSReceive(msg) {
            // Parse the response from the server
            let resp = JSON.parse(msg.data);
            
            // route the message based on response command
            
            // handles individual readings
            if (resp.cmd === "RESP_READING") {
                readingHandler(resp);
            }
            // handles whole datasets
            else if (resp.cmd === "RESP_STREAM") {
                streamHandler(resp);
            }
            // handles stats for datasets
            else if (resp.cmd === "RESP_SENSOR_STATS") {
                statsHandler(resp);
            }
        }
        
        // Register handlers for the WebSocket
        ws.onopen = onWSOpen;
        ws.onmessage = onWSReceive;
        ws.onclose = onWSClose;
        
        //
        // Define additional support functions
        //
        
        /**
         * Constructs a new ChartJS line chart.
         * @param raw_dataset The dataset to intialize the chart with.
         */
        function createChart() {
            // get the context for the chart
            let ctx = $('#canvas_chart')[0].getContext('2d');
            
            // return the chart
            return new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: "Value over Time",
                        backgroundColor: "rgb(255, 99, 132)",
                        borderColor: "rgb(255, 99, 132)",
                        fill: false,
                        data: []
                    }]
                },
                options: {
                    responsiveness: true,
                    maintainAspectRatio: false,
                    title: {
                        display: true,
                        text: "Time Series for Sensor {{ sensorid }}"
                    },
                    // enable scaling in realtime
                    scales: {
                        xAxes: [{
                            type: 'realtime',
                            distribution: "series",
                            display: true
                        }],
                        yAxes: [{
                            type: 'linear',
                            display: true
                        }]
                    }
                }
            });
        }
        
        /**
         * Reloads the chart with a new dataset.
         * @param dataset The dataset to load into the chart.
         */
        function reloadChart() {
            if (rtChart != null) {
                // destroy the original chart
                rtChart.destroy();
            }
            
            // rebuild the chart
            rtChart = createChart();
        }
        
        /**
         * Reloads the list with a new dataset.
         * @param dataset The dataset to load into the list.
         */
        function reloadList(dataset) {
            // empty display of all children
            $("#list_readings").empty();
            
            // rebuild the list with the new values
            dataset.forEach(function(reading) {
                $('<li/>')
                    .addClass("list-group-item")
                    .text(reading.rstring)
                    .appendTo($("#list_readings"));
            });
            
            // select the first element from the set of child list items
            //  apply the active class
            $("#list_readings > li")
                .first()
                .addClass("active");
                
            console.log($("#list_readings").first());
        }
        
        /**
         * Handles onclick events for the stats readout.
         */
        function onStatsRequested() {
            let rtypeid = $("#sel_rtype option:selected").val();
            let start_date = $("#start_date_picker").val();
            let end_date = $("#end_date_picker").val();
            
            // TODO: verify that the dates or rtype actually changed
            
            // verify the start date is less than the end date
            if (start_date >= end_date) {
                return;
            }
            
            // convert the start and end dates over to moment
            start_date = moment(start_date).format('X');
            end_date = moment(end_date).format('X');
            
            // construct the message for the server
            let msg = {
                'cmd': 'RQST_SENSOR_STATS',
                'sensorid': sensorid,
                'groupid': groupid,
                'rtypeid': rtypeid,
                'start_date': start_date,
                'end_date': end_date
            };
            
            // send the message to the server
            ws.send(JSON.stringify(msg));
            
            // reset the number of readings
            readingsSoFar = 0;
        }
        
        /**
         * Handles onchange events for the rtype selector.
         */
        function onStreamChanged() {
            let rtypeid = $("#sel_rtype").val()
            
            // TODO: check that the rtype actually changed
            
            let msg = {
                'cmd': 'RQST_STREAM',
                'sensorid': sensorid,
                'groupid': groupid,
                'rtypeid': rtypeid
            };
            
            ws.send(JSON.stringify(msg));
            
            // fire the onStatsRequested handler too
            onStatsRequested();
        }
    </script>
{% endblock %}
