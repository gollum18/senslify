{% extends 'base.jinja2' %}

{% block head %}
<!-- Pull down ChartJS for graphing -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.4.0/dist/chart.min.js"></script>
    <!-- Make sure to test the new versions of these libraries prior to upgrading them. -->
    <!-- Luxon - Moment was deprecated in favor of it -->
    <script src="https://cdn.jsdelivr.net/npm/luxon@1.27.0/build/global/luxon.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-adapter-luxon@1.0.0/dist/chartjs-adapter-luxon.min.js"></script>    
    <!-- ChartJS Streaming plugin -->
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-streaming@2.0.0/dist/chartjs-plugin-streaming.min.js"></script>
    <!-- DownloadJS Extension -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/downloadjs/1.4.8/download.min.js"></script>
{% endblock %}

{% block breadcrumbs %}
    <li class="breadcrumb-item"><a href="{{ url('index') }}">Home</a></li>
    <li class="breadcrumb-item"><a href="{{ referer_url }}">Sensor Listings</a></li>
    <li class="breadcrumb-item active">Sensor Information</li>
{% endblock %}

{% block header %}
    <div class="row">
        <h4 id="generic_error_control" class="alert alert-danger invisible" role="alert"></h4>
    </div>
{% endblock %}

{% block content %}
    <!-- This section defines the stats display for real-time stats. -->
    <section class="container-fluid">
        <div class="row">
            <h3>Real-time Statistics for Sensor '{{ alias }}':</h3>
        </div>
        <div class="row">
            <table class="table">
                <tr class="table-primary">
                    <th scope="col">Average</th>
                    <th scope="col">Minimum</th>
                    <th scope="col">Maximum</th>
                </tr>
                <tr class="table-light">
                    <td id="rt_stats_avg">0</td>
                    <td id="rt_stats_min">Infinity</td>
                    <td id="rt_stats_max">-Infinity</td>
                </tr>
            </table>
        </div>
        <div class=container-fluid>
            <div class="row align-items-start">
                <div class="col">
                    <!-- Used to indicate the reading type to send from server -->
                    <select id="sel_rtype" class="form-select" onchange="onStreamChanged();">
                        {% for rtype in rtypes %}
                            <option value="{{ rtype.rtypeid }}">{{ rtype.rtype }}</option>
                        {% endfor %}
                    </select>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#statsModal">
                    View Historical Stats
                    </button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#downloadModal">
                    Download Sensor Readings
                    </button>
                </div>
                <div class="col">
                    <button type="button" class="btn btn-outline-info" data-bs-toggle="modal" data-bs-target="#alertsModal">
                    View Sensor Alerts
                    </button>
                </div>
            </div>
        </div>
    </section>
    <!-- This section defines the live chart. -->
    <section class="container-fluid">
        <div class="row">
            <h3>Live Display for Sensor '{{ alias }}':</h3>
        </div>
        <div class="row">
            <div class="chart-container" style="position: relative; height:40vh; width:80vw">
                <canvas id="canvas_chart"></canvas>
            </div>
        </div>
        <div class="row">
            <h6>Note: Live display will not update if the sensor is offline.</h6>
        </div>
        <div class="row">
            
        </div>
    </section>
    <section class="container-fluid">
        <h3>Last {{ num_readings }} Readings for Sensor {{ alias }}:</h3>
        <ul class="list-group" id="list_readings"></ul>
    </section>
    <!-- This defines the modal for selecting stats over a time period -->
    <div class="modal fade bd-example-modal-lg" id="statsModal" tabindex="-1" role="dialog"  aria-labelledby="On-Demand stats" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 id="stats_header"></h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <table class="table">
                <tr class="table-primary">
                    <th scope="col">Average</th>
                    <th scope="col">Minimum</th>
                    <th scope="col">Maximum</th>
                </tr>
                <tr class="table-light">
                    <td id="sel_stats_avg">0</td>
                    <td id="sel_stats_min">Infinity</td>
                    <td id="sel_stats_max">-Infiity</td>
                </tr>
            </table>
          </div>
          <div class="modal-footer">
            <div class="container-fluid">
              <div class="row">
                <label for="st_start_date_picker">Start Date:</label>
                <input id="st_start_date_picker" type="date" value="{{ start_date|date }}" required>
                <label for="st_end_date_picker">End Date:</label>
                <input id="st_end_date_picker" type="date" value="{{ end_date|date }}" required>
              </div>
              <div class="row">
                <span><strong>Note:</strong> The end date must be +1 day from what you intend to retrieve the correct results for your timespan.</span>
              </div>
              <div class="row">
                <input type="button" class="btn btn-primary" value="Get Stats" onclick="onStatsRequested();">
              </div>
              <div class="row">
                <h4 id="stats_error_control" class="alert alert-danger invisible" role="alert"></h4>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- This defines the modal for downloading readings over a time period -->
    <div class="modal fade bd-example-modal-lg" id="downloadModal" tabindex="-1" role="dialog"  aria-labelledby="On-Demand Download" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 id="download_header">Download readings for sensor '{{ alias }}'':</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="container-fluid">
              <div class="row">
                <label for="dl_start_date_picker">Start Date:</label>
                <input id="dl_start_date_picker" type="date" value="{{ start_date|date }}" required>
                <label for="dl_end_date_picker">End Date:</label>
                <input id="dl_end_date_picker" type="date" value="{{ end_date|date }}" required>
                <label for="dl_filename">Filename:</label>
                <input id="dl_filename" type="text" value="{{ end_date }}.json" required>
              </div>
              <div class="row">
                <span><strong>Note:</strong> The end date must be +1 day from what you intend to retrieve the correct results for your timespan.</span>
              </div>
              <div class="row">
                <input type="button" class="btn btn-primary" value="Download" onclick="onDownloadRequested();">
              </div>
              <div class="row">
                <h4 id="download_error_control" class="alert alert-danger invisible" role="alert"></h4>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
    <!-- This defines the modal that displays sensor measurement alerts -->
    <div class="modal fade bd-example-modal-lg" id="alertsModal" tabindex="-1" role="dialog"  aria-labelledby="On-Demand Download" aria-hidden="true">
      <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
          <div class="modal-header">
            <h5 id="alerts_header">Alerts for sensor '{{ alias }}':</h5>
            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
          </div>
          <div class="modal-body">
            <div class="container-fluid">
              <div class="row">
                <ul class="list-group" id="list_alerts" style="white-space: pre-wrap"><ul>
              </div>
              <div class="row">
                <input type="button" class="btn btn-primary" value="Clear Alerts" onclick="onAlertsCleared();">
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
{% endblock %}

{% block footer %}
    <!-- The below script handles WebSocket and chart interaction. -->
    <script>
        
        //
        // Define all necessary script variables
        //
        
        // the number of readings to retrieve from the server
        const rlim = {{ num_readings }};
        // the id of the sensor to receive messages for
        const sensorid = {{ sensorid }};
        // the id of the group the sensor belongs to
        const groupid = {{ groupid }};
        // the websocket for sending/receiving messages to/from the server
        //  the websocket is constant as it persists for the life of the page
        const ws = new WebSocket('{{ ws_url }}');
        // the max number of join attempts
        const max_join_attempts = {{ max_join_attempts }};
        // the deviation tolerance for sensor readings
        const max_reading_deviation = {{ max_reading_deviation }};
        // stores the number of readings seen so far
        var readingsSoFar = 0;
        // stores the prior reading that was received
        var priorReading = 0;
        // stores a reference to the chart object for graphically displaying 
        //  readings
        var rtChart = null;
        // join attempts so far
        var join_attempts = 0;
        // initial timeout for join requests
        const join_timeout = 64;
        //
        // Define handlers for the window
        //
        
        function teardown() {
            let msg = {'cmd': 'RQST_CLOSE', 'groupid': groupid, 'sensorid': sensorid};
            ws.send(JSON.stringify(msg));
            ws.close();
        }
        
        /**
         * Handles back and forward events from the browser.
         * Signals a teardown of the WS at the server as well to teardown the
         * WS on the client.
         */
        window.onhashchange = function() {
            teardown();
        }
        
        // Tears down the WebSocket when the window is closed.
        $(window).on("unload", () => {
            teardown();
        });
        
        //
        // Define handlers for the WebSocket
        //

        function sendJoinRequest() {
            let rqst = {'cmd': 'RQST_JOIN', 'groupid': groupid, 'sensorid': sensorid};
            ws.send(JSON.stringify(rqst));
        }

        /**
         * Client side WS Handler that handles error responses.
         * This handler will write the error to one of three locations
         * depending on the error command that was sent by the server.
         * This handler will set a 5 second timer on the destination error
         * control to reset the text content of the control to empty after
         * the 5 seconds has elapsed.
         */
        function errorHandler(resp) {
            let cmd = resp.cmd;
            let error = resp.error;
            let error_control = null;
            if (cmd === "RESP_ERROR") {
                error_control = $("#generic_error_control");
            } else if (cmd === "RESP_STATS_ERROR") {
                error_control = $("#stats_error_control");
            } else if (cmd === "RESP_DOWNLOAD_ERROR") {
                error_control = $("#download_error_control");
            } else {
                return;
            }
            if (error.length == 0) {
                return
            }
            error_control.text(error);
            // h4 default display property is block, this is unchanged by the danger-alert bootstrap class
            error_control.removeClass("invisible");
            error_control.addClass("visible");
            setTimeout(() => {
                error_control.text("");
                error_control.removeClass("visible");
                error_control.addClass("invisible");
            }, 5000);
        }
        
        /**
         * Client side WS Handler that handles join responses.
         * This handler will attempt do nothing if the join response 
         * was successful otherwise it will attempt to establish a connection
         * with the server side socket up to max_join_attempts times.
         * If this number is exceeded, the web page will be redirected 
         * to the sensor listing page. 
         */
        function joinHandler(resp) {
            let join_result = resp.join_result;
            let exp = 2;
            if (join_result === 'false') {
                if (join_attempts == max_join_attempts) {
                    // redirect back to the sensor listings page
                    window.history.back();
                } else {
                    // implement exponential backoff for join attempts
                    //  to prevent flooding server with requests
                    // min timeout is 64ms, max is 512 ms
                    // steps from:
                    //  64, 128
                    //  64, 128, 192, 256
                    //  64, 128, 192, 256, 320, 384, 446, 512
                    setTimeout(() => {
                        join_attempts += 1;
                        exp *= 2;
                        sendJoinRequest();
                    }, join_timeout * (getRandomInt(exp) + 1));
                }
            }
        }
        
        /**
         * Client side WS handler that handles received messages (readings)
         * from the server. The client only receives readings for the 
         * sensorid and rtypeid that it has registered to receive updates on.
         * @param resp The response from the server.
         */
        function readingHandler(resp) {
            // increment the number of readings seen so far
            //  I dont anticipate someone to sit on the window long enough
            //  for the readings counter to wrap
            readingsSoFar += 1;
        
            // get the components we need to update
            let tdMin = $("#rt_stats_min");
            let tdMax = $("#rt_stats_max");
            let tdAvg = $("#rt_stats_avg");
            let rlist = $("#list_readings");
            
            // evict the oldest reading if at the limit
            if (rlist.children().length === rlim) {
                rlist.children().last().remove();
            }
            
            // TODO: We probably want to store the stuff for averaging
            //  separately as the current method works on floats of two
            //  different precisions
            try {
                // update the stats for the readings
                let value = parseFloat(resp.readings[0].val);
                let oldMin = parseFloat(tdMin.text());
                let oldMax = parseFloat(tdMax.text());
                if (value < oldMin) {
                    tdMin.text(value.toFixed(4));
                } else if (value > oldMax) {
                    tdMax.text(value.toFixed(4));
                }
                if (readingsSoFar === 1) {
                    tdAvg.text(value.toFixed(4));
                } else {
                    let oldMu = parseFloat(tdAvg.text());
                    let newMu = oldMu + ((value - oldMu) / readingsSoFar);
                    tdAvg.text(newMu.toFixed(4));
                }
                // check if an alert needs raised
                if (readingsSoFar > 0) {
                    let priorValue = parseFloat(priorReading.val)
                    if (value > priorValue + priorValue * max_reading_deviation) {
                        pushAlert(resp.readings[0]);
                        let msg = {'cmd': 'RESP_ERROR', 'error': 'Most recent reading is above tolerated amount!'}
                        errorHandler(msg);
                    } else if (value < priorValue - priorValue * max_reading_deviation) {
                        pushAlert(resp.readings[0]);
                        let msg = {'cmd': 'RESP_ERROR', 'error': 'Most recent reading is below tolerated amount!'};
                        errorHandler(msg);
                    }
                }
                priorReading = resp.readings[0];
            } catch (err) {
                let msg = {'cmd': "RESP_ERROR", error: String(err)};
                errorHandler(msg);
                readingsSoFar = 0;
                tdMin.text("0");
                tdMax.text("0");
                tdAvg.text("0");
            }
            
            // get the first element, remove the active class from it
            $("#list_readings > li")
                .first()
                .removeClass("active");
            
            // add the reading to the front of the list
            $('<li/>')
                    .addClass("list-group-item active")
                    .text(resp.readings[0].rstring)
                    .prependTo($("#list_readings"));

            // add the new reading to the chart
            rtChart.data.datasets[0].data.push({
                // timestamp is unix time, need to convert to millis for luxon
                x: luxon.DateTime.fromMillis(resp.readings[0].ts*1000).toUTC().toLocaleString(luxon.DateTime.TIME_WITH_SECONDS),
                y: resp.readings[0].val
            });
            
            // update the chart, keeping the current animation
            rtChart.update('quiet');
        }

        function downloadHandler(resp) {
            let filename = $("#dl_filename").val();
            let blob = new Blob([JSON.stringify(resp.data)], {type: "application/json"});
            download(blob, filename, "application/json");
        }
        
        /**
         * Client side WS handler that handles received messages (stas) from
         * the server. The client receives an up-to-date view on the stats for 
         * a single RType and Sensor. The stats are stored in the message using
         * the following mapping: 
         *   stats: avg, min, max
         * @param resp The response from the server.
         */
        function statsHandler(resp) {
            let stats = resp.stats;
            let rtext = $("#sel_rtype option:selected").text();
            let start_date = $("#st_start_date_picker").val();
            let end_date = $("#st_end_date_picker").val()
            
            $("#stats_header").text(`Showing ${rtext} stats for the range: ${start_date} - ${end_date}`);
                
            $("#sel_stats_avg").text(stats.avg.toFixed(4));
            $("#sel_stats_min").text(stats.min.toFixed(4));
            $("#sel_stats_max").text(stats.max.toFixed(4));
        }
        
        /**
         * Client side WS handler that handles received messages (a dataset)
         * from the server. The client receives an up-to-date dataset containing
         * the top 100 most recent readings for the sensorid and rtypeid they
         * are registered with.
         * @param resp The response from the server.
         */ 
        function streamHandler(resp) {
            // get the readings from the response
            let readings = resp.readings;
            
            // reset the chart
            reloadChart();
            
            // reload the list
            reloadList(resp.readings);

            // empty the alerts modal
            onAlertsCleared();
        }
        
        /**
         * Client side WS handle that is fired when the WebSocket is closed.
         * Handles cleaning up after it.
         */
        function onWSClose() {
			rtChart.destroy();
        }
        
        /**
         * Client side WS handler that fires when the WebSocket first opens.
         * This is used by the client to register the sensor it wants to
         * receive updates for.
         * @param err An error if one occurs.
         */
        function onWSOpen(err) {
            // Register a listener on the server
            sendJoinRequest();
            // Only get the initial dataset when the document has loaded
            $(document).ready(function() {
                onStreamChanged();
            });
        }
        
        /**
         * Routes messages received over the WebSocket interface.
         * @param msg A message received via the WebSocket.
         */
        function onWSReceive(msg) {
            // Parse the response from the server
            let resp = JSON.parse(msg.data);
            
            // route the message based on response command
            
            // handles response from join command
            if (resp.cmd == "RESP_JOIN") {
                joinHandler(resp);
            }
            // handles individual readings
            else if (resp.cmd === "RESP_READING") {
                readingHandler(resp);
            }
            // handles whole datasets
            else if (resp.cmd === "RESP_STREAM") {
                streamHandler(resp);
            }
            // handles downloading of datasets
            else if (resp.cmd === 'RESP_DOWNLOAD') {
                downloadHandler(resp);
            }
            // handles stats for datasets
            else if (resp.cmd === "RESP_SENSOR_STATS") {
                statsHandler(resp);
            }
            // handles errors meant to be displayed on the page itself
            else if (resp.cmd === "RESP_ERROR") {
                errorHandler(resp);
            }
            // handles errors meant to be displayed on the stats modal
            else if (resp.cmd === "RESP_STATS_ERROR") {
                errorHandler(resp);
            } 
            // handles errors meant to be displayed on the download modal
            else if (resp.cmd === "RESP_DOWNLOAD_ERROR") {
                errorHandler(resp);
            }
            // handles if the server responds with an invalid cmd
            else {
                resp.cmd = "RESP_ERROR";
                resp.error = "ERROR: Server sent invalid command!";
                errorHandler(resp);
            }
        }
        
        // Register handlers for the WebSocket
        ws.onopen = onWSOpen;
        ws.onmessage = onWSReceive;
        ws.onclose = onWSClose;
        
        //
        // Define additional support functions
        //
        
        /**
         * Constructs a new ChartJS line chart.
         * @param raw_dataset The dataset to intialize the chart with.
         */
        function createChart() {
            // get the context for the chart
            let ctx = $('#canvas_chart')[0].getContext('2d');
            
            // return the chart
            return new Chart(ctx, {
                type: 'line',
                data: {
                    datasets: [{
                        label: 'Value over Time',
                        borderColor: '#33b5e5',
                        pointBackgroundColor: '#168eba',
                        fill: false,
                        data: []
                    }]
                },
                options: {
                    scales: {
                        xAxis: {
                            type: 'realtime',
                            time: {
                                parser: "h:mm:ss a"
                            }
                        }
                    },
                    responsive: true,
                    maintainAspectRatio: false
                }
            });
        }

        /**
         * Returns a random integer in the range [0, max).
         * @param max The exclusive upper bound on the range to return.
         * @returns A random number in the range [0, max).
         */
        function getRandomInt(max) {
            return Math.floor(Math.random() * max);
        }

        /**
         * Generates and pushes a sensor reading alert to the alert modal.
         * @param reading The reading that caused the alert.
         */
        function pushAlert(reading) {
            // format the alert message
            let alert = `Current Reading: ${reading.rstring}\nPrior Reading: ${priorReading.rstring}`;

            // push the alert message
            $('<li/>')
                .addClass("list-group-item")
                .text(alert)
                .prependTo($("#list_alerts"));
        }
        
        /**
         * Reloads the chart with a new dataset.
         * @param dataset The dataset to load into the chart.
         */
        function reloadChart() {
            if (rtChart != null) {
                // destroy the original chart
                rtChart.destroy();
            }
            
            // rebuild the chart
            rtChart = createChart();
        }
        
        /**
         * Reloads the list with a new dataset.
         * @param dataset The dataset to load into the list.
         */
        function reloadList(dataset) {
            // empty display of all children
            $("#list_readings").empty();
            
            // rebuild the list with the new values
            dataset.forEach(function(reading) {
                $('<li/>')
                    .addClass("list-group-item")
                    .text(reading.rstring)
                    .appendTo($("#list_readings"));
            });
            
            // select the first element from the set of child list items
            //  apply the active class
            $("#list_readings > li")
                .first()
                .addClass("active");
        }

        /**
         * onclick button event handler that handles when the alarm events 
         * are cleared from the alarm modal.
         */
        function onAlertsCleared() {
            // removes all child li elements from the alerts list
            $("#list_alerts").empty();
        }

        /**
         * onclick button event handler that handles when a download is 
         * requested.
         */
        function onDownloadRequested() {
            let start_date = $("#dl_start_date_picker").val();
            let end_date = $("#dl_end_date_picker").val();

            // verify the start date is less than the end date
            if (start_date >= end_date) {
                let msg = {'cmd': 'RESP_DOWNLOAD_ERROR', 'error': 'ERROR: Start TS must be < End TS!'};
                errorHandler(msg);
                return;
            }

            // convert the start and end dates over to luxon
            let start_ts = luxon.DateTime.fromISO(start_date).toMillis()/1000;
            let end_ts = luxon.DateTime.fromISO(end_date).toMillis()/1000;

            // construct the message for the server
            let msg = {
                'cmd': 'RQST_DOWNLOAD',
                'sensorid': sensorid,
                'groupid': groupid,
                'start_ts': start_ts,
                'end_ts': end_ts
            };
            
            // send the message to the server
            ws.send(JSON.stringify(msg));
        }
        
        /**
         * Handles onclick events for the stats readout.
         */
        function onStatsRequested() {
            let rtypeid = $("#sel_rtype option:selected").val();
            let start_date = $("#st_start_date_picker").val();
            let end_date = $("#st_end_date_picker").val();
            
            // TODO: verify that the dates or rtype actually changed
            
            // verify the start date is less than the end date
            if (start_date >= end_date) {
                let msg = {'cmd': 'RESP_STATS_ERROR', 'error': 'ERROR: Start TS must be < End TS!'};
                errorHandler(msg);
                return;
            }
            
            // convert the start and end dates over to moment
            let start_ts = luxon.DateTime.fromISO(start_date).toMillis()/1000;
            let end_ts = luxon.DateTime.fromISO(end_date).toMillis()/1000;
            
            // construct the message for the server
            let msg = {
                'cmd': 'RQST_SENSOR_STATS',
                'target': 'sensors',
                'sensorid': sensorid,
                'groupid': groupid,
                'rtypeid': rtypeid,
                'start_ts': start_ts,
                'end_ts': end_ts
            };
            
            // send the message to the server
            ws.send(JSON.stringify(msg));
            
            // reset the number of readings
            readingsSoFar = 0;
        }
        
        /**
         * Handles onchange events for the rtype selector.
         */
        function onStreamChanged() {
            let rtypeid = $("#sel_rtype").val()
            
            // TODO: check that the rtype actually changed
            
            let msg = {
                'cmd': 'RQST_STREAM',
                'sensorid': sensorid,
                'groupid': groupid,
                'rtypeid': rtypeid
            };
            
            ws.send(JSON.stringify(msg));
            
            // fire the onStatsRequested handler too
            onStatsRequested();
        }
    </script>
{% endblock %}
